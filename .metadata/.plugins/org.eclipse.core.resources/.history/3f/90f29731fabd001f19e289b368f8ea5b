package Server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import Models.Customer;
import Models.Cart;
import Models.Product;

import Server.Server.globalConn;


public class ClientHandler implements Runnable {

	private Socket socket;

	private DataInputStream input;
	
	private DataOutputStream output;
	
	private float total;
	private float pr;

	public ClientHandler(Socket sock) {
		try {
			socket = sock;
			input = new DataInputStream(socket.getInputStream());
			output = new DataOutputStream(socket.getOutputStream());
        } catch(IOException e) {
				e.printStackTrace();
		}
	}

	//funzioni da richiamare nello switch
	
    public void Login() throws IOException {
        String username = input.readUTF();
        String password = input.readUTF();   

        try (Connection con = DriverManager.getConnection(globalConn.jdbcURL, globalConn.usernameDb, globalConn.passwordDb)) {
            // Query per recuperare i dati dell'utente dal database
            String selectQuery = "SELECT Id_customer, Name, Email, Psw FROM Customer WHERE Email = ? OR Psw = ?";

            try (PreparedStatement preparedStatement = con.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, username);
                preparedStatement.setString(2, password);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String validUsername = resultSet.getString("Email");
                    String validPassword = resultSet.getString("Psw");
                    String validName = resultSet.getString("Name");
                    String id = String.valueOf(resultSet.getInt("Id_customer"));

                    //Employer.setName(validName);
                    if (password.equals(validPassword) && username.equals(validUsername) ) {
                        System.out.println("Login successful!");
                        
                        //Costumer.setName(validName);
                        Customer.setName(validName);
                        
                        //data.CId = Integer.valueOf(id);
                        //data.getData().setCId(Integer.valueOf(id));
 
                        output.writeUTF("valid");
                        output.writeUTF(validName);
                        output.flush();

                    } else {
                        System.out.println("Login failed. Please try again.");
                        output.writeUTF("invalid");
                        output.flush();
                    }
                } else {
                    System.out.println("Username not found. Please try again.");
                    //labelText.setText("Username not found. Please try again.");
                    output.writeUTF("notfoundUsername");
                    output.flush();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
//        output.flush();
//        output.close();

    }
    
    //funzione per creare un nuovo utente 
    public void SignUp() throws IOException{
    	boolean exist = false;  
        String cF = input.readUTF();
        String username = input.readUTF();
        String usersurname = input.readUTF();
        String tel = input.readUTF();
        String email = input.readUTF();
        String password = input.readUTF();
        String address = input.readUTF();
        String city = input.readUTF();
        

        try (Connection con = DriverManager.getConnection(globalConn.jdbcURL, globalConn.usernameDb, globalConn.passwordDb);) {

            // check if cf or email is present on the db
            String queryCheck = "SELECT CF, Email FROM Customer WHERE CF = ? OR Email = ? LIMIT 1";

            try (PreparedStatement preparedStatement = con.prepareStatement(queryCheck)) {
                preparedStatement.setString(1, cF);
                preparedStatement.setString(2, email);
                ResultSet resultSetCheck = preparedStatement.executeQuery();

                if(resultSetCheck.next()) {
                    exist = true;
                    System.out.print("Esiste giÃ  l'account\n");
                    
                    output.writeUTF("Already existent!");
                }
                else {
                    exist = false;
                    System.out.print("Non esiste l'account, sarai inserito !\n");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            if(exist == false) {
                String insertQuery = "INSERT INTO Customer (CF, Name, Surname, Telphone, Email, Psw, Drop_address, City) VALUE (" + "'" + cF +  "'"+ ", " +  "'" + username +  "'" + ", " + "'" + usersurname + "'" + ", " + "'" + tel + "'" + ", " + "'" + email + "'" + ", " + "'" + password + "'" + ", " + "'" + address + "'" + ", " + "'" + city + "'" + ");";

                try (Statement st = con.createStatement()) {
                    st.executeUpdate(insertQuery);
                    System.out.print("Account inserito!\n");
                    
                    output.writeUTF("Add account");
                }
            }

            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        output.flush();
//        output.close();
	}
	
  
	@Override
	public void run() {

		try {
			while(true) {

			String commandToExecute = input.readUTF();
			System.out.println("variabile switch -> " + commandToExecute);


			  // Perform the requested calculation
			if(commandToExecute == "CloseConnection") {
				socket.close();
		    	break;
			}
			
			switch (commandToExecute) {
				case "Login":
					Login();
					break;
				case "SignUp": 
			      SignUp();
			      break;
		   
			}
			//output.flush();
		} 

	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    
	}
}
